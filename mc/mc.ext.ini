[mc.ext.ini]
Version=4.0

# Midnight Commander 3.0 extension file
# Warning: Structure of this file has changed completely with version 3.0
#
# All lines starting with # or empty lines are thrown away.
# Lines starting in the first column should have following format:
#
# keyword/descNL, i.e. everything after keyword/ until new line is desc
#
# keyword can be:
#
#    shell (desc is, when starting with a dot, any extension (no wildcars),
#          i.e. matches all the files *desc . Example: .tar matches *.tar;
#          if it doesn't start with a dot, it matches only a file of that name)
#
#    shell/i (desc is, when starting with a dot, any extension (no wildcars),
#          The same as shell but with case insensitive.
#
#    regex (desc is an extended regular expression)
#          Please note that we are using the GNU regex library and thus
#          \| matches the literal | and | has special meaning (or) and
#          () have special meaning and \( \) stand for literal ( ).
#
#    regex/i (desc is an extended regular expression)
#          The same as regex but with case insensitive.
#
#    type  (file matches this if `file %f` matches regular expression desc
#          (the filename: part from `file %f` is removed))
#
#    type/i (file matches this if `file %f` matches regular expression desc)
#          The same as type but with case insensitive.
#
#    directory (matches any directory matching regular expression desc)
#
#    include (matches an include directive)
#
#    default (matches any file no matter what desc is)
#
# Other lines should start with a space or tab and should be in the format:
#
# keyword=commandNL (with no spaces around =), where keyword should be:
#
#    Open (if the user presses Enter or doubleclicks it),
#
#    View (F3), Edit (F4)
#
#    Include is the keyword used to add any further entries from an include/
#    section
#
# command is any one-line shell command, with the following substitutions:
#
# %% -> % character
# %p -> name of the current file (without path, but pwd is its path).
#       Also provided to external application as MC_EXT_BASENAME
#       global variable
# %f -> name of the current file. Unlike %p, if file is located on a
#	non-local virtual filesystem, i.e. either tarfs or ftpfs,
#	then the file will be temporarily copied into a local directory
#	and %f will be the full path to this local temporal file.
#	If you don't want to get a local copy and want to get the
#	virtual fs path (like /#ftp:ftp.cvut.cz/pub/hungry/xword), then
#	use %d/%p instead of %f.
#       Also provided to external application as MC_EXT_FILENAME
#       global variable
# %d -> name of the current directory (pwd, without trailing slash)
#       Also provided to external application as MC_EXT_CURRENTDIR
#       global variable
# %s -> "selected files", i.e. space separated list of tagged files if any
#       or name of the current file.
#       Also provided to external application as MC_EXT_SELECTED
#       global variable
# %t -> list of tagged files
#       Also provided to external application as MC_EXT_ONLYTAGGED
#       global variable
# %u -> list of tagged files (they'll be untaged after the command)
#
# (If these 6 letters are in uppercase, they refer to the other panel.
# But you shouldn't have to use it in this file.)
#
#
# %cd -> the rest is a path mc should change into (cd won't work, since it's
#	a child process).  %cd handles even vfs names.
#
# %view -> the command you type will be piped into mc's internal file viewer
#	if you type only the %view and no command, viewer will load %f file
#	instead (i.e. no piping, so it is different to %view cat %f)
#	%view may be directly followed by {} with a list of any of
#	ascii (Ascii mode), hex (Hex mode), nroff (color highlighting for
#	text using backspace for bold and underscore) and unform
#	(no highlighting for nroff sequences) separated by commas.
#
# %var -> You use it like this: %var{VAR:default}.  This macro will expand
#       to the value of the VAR variable in the environment if it's set
#       otherwise the value in default will be used.  This is similar to
#       the Bourne shell ${VAR-default} construct.
#
# Rules are applied from top to bottom, thus the order is important.
# If some actions are missing, search continues as if this target didn't
# match (i.e. if a file matches the first and second entry and View action
# is missing in the first one, then on pressing F3 the View action from
# the second entry will be used. default should catch all the actions.
#
# Any new entries you develop for you are always welcome if they are
# useful on more than one system.  You can post your modifications
# as tickets at www.midnight-commander.org


### Changes ###
#
# Reorganization: 2012-03-07 Slava Zanko <slavazanko@gmail.com>
#                 2021-03-28 Andrew Borodin <aborodin@vmail.ru>


### GIT Repo ###
# gitfs changeset
#regex/^\[git\]
[Regex/^__git__]
	Regex=^\[git\]
	RegexIgnoreCase=false
	Open=%cd %p/changesetfs://
	View=%cd %p/patchsetfs://


### Archives ###
# Since we use "file -z", we should use regex/ and shell/ at first, then type/.

# .tgz, .tpz, .tar.gz, .tar.z, .tar.Z, .ipk, .gem
#regex/\.t([gp]?z|ar\.g?[zZ])$|\.ipk$|\.gem$
[Regex/_.t__gp__z_ar_.g__zZ_____.ipk___.gem_]
	Regex=\.t([gp]?z|ar\.g?[zZ])$|\.ipk$|\.gem$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.gz

#shell/.tar.bz
[Shell/.tar.bz]
	Shell=.tar.bz
	ShellIgnoreCase=false
	# Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.bzip

#regex/\.t(ar\.bz2|bz2?|b2)$
[Regex/_.t_ar_.bz2_bz2__b2__]
	Regex=\.t(ar\.bz2|bz2?|b2)$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.bzip2

# .tar.lzma, .tlz
#regex/\.t(ar\.lzma|lz)$
[Regex/_.t_ar_.lzma_lz__]
	Regex=\.t(ar\.lzma|lz)$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.lzma

# .tar.lz
#shell/.tar.lz
[Shell/.tar.lz]
	Shell=.tar.lz
	ShellIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.lz

# .tar.lz4, .tlz4
#regex/\.t(ar\.lz4|lz4)$
[Regex/_.t_ar_.lz4_lz4__]
	Regex=\.t(ar\.lz4|lz4)$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.lz4

# .tar.xz, .txz
#regex/\.t(ar\.xz|xz)$
[Regex/_.t_ar_.xz_xz__]
	Regex=\.t(ar\.xz|xz)$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.xz

# .tar.zst, .tzst
#regex/\.t(ar\.zst|zst)$
[Regex/_.t_ar_.zst_zst__]
	Regex=\.t(ar\.zst|zst)$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.zst

# .tar.F - used in QNX
#shell/.tar.F
[Shell/.tar.F]
	Shell=.tar.F
	ShellIgnoreCase=false
	# Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.F

# .qpr/.qpk - QNX Neutrino package installer files
#regex/\.qp[rk]$
[Regex/_.qp_rk__]
	Regex=\.qp[rk]$
	RegexIgnoreCase=false
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar.qpr

# tar
#shell/i/.tar
[Shell/.tar]
	Shell=.tar
	ShellIgnoreCase=true
	Open=%cd %p/utar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view tar

# arj
#regex/i/\.a(rj|[0-9][0-9])$
[Regex/_.a_rj__0-9__0-9___]
	Regex=\.a(rj|[0-9][0-9])$
	RegexIgnoreCase=true
	Open=%cd %p/uarj://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view arj

# cab
#shell/i/.cab
[Shell/.cab]
	Shell=.cab
	ShellIgnoreCase=true
	Open=%cd %p/ucab://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cab

# ha
#shell/i/.ha
[Shell/.ha]
	Shell=.ha
	ShellIgnoreCase=true
	Open=%cd %p/uha://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view ha

# rar
#regex/i/\.r(ar|[0-9][0-9])$
[Regex/_.r_ar__0-9__0-9___]
	Regex=\.r(ar|[0-9][0-9])$
	RegexIgnoreCase=true
	Open=%cd %p/urar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view rar

# ALZip
#shell/i/.alz
[Shell/.alz]
	Shell=.alz
	ShellIgnoreCase=true
	Open=%cd %p/ualz://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view alz

# cpio
#shell/.cpio.Z
[Shell/.cpio.Z]
	Shell=.cpio.Z
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.z

#shell/.cpio.lz
[Shell/.cpio.lz]
	Shell=.cpio.lz
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.lz

#shell/.cpio.lz4
[Shell/.cpio.lz4]
	Shell=.cpio.lz4
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.lz4

#shell/.cpio.xz
[Shell/.cpio.xz]
	Shell=.cpio.xz
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.xz

#shell/.cpio.zst
[Shell/.cpio.zst]
	Shell=.cpio.zst
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.zst

#shell/.cpio.gz
[Shell/.cpio.gz]
	Shell=.cpio.gz
	ShellIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio.gz

#shell/i/.cpio
[Shell/.cpio]
	Shell=.cpio
	ShellIgnoreCase=true
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio

# initrd
#regex/^(initramfs.*\.img|initrd(-.+)?\.img(-.+)?)$
[Regex/^_initramfs.*_.img_initrd_-.+___.img_-.+____]
	Regex=^(initramfs.*\.img|initrd(-.+)?\.img(-.+)?)$
	RegexIgnoreCase=false
	Open=%cd %p/ucpio://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view cpio

# 7zip archives (they are not man pages)
#shell/i/.7z
[Shell/.7z]
	Shell=.7z
	ShellIgnoreCase=true
	Open=%cd %p/u7z://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view 7z

# patch
#regex/\.(diff|patch)(\.bz2)$
[Regex/_._diff_patch___.bz2__]
	Regex=\.(diff|patch)(\.bz2)$
	RegexIgnoreCase=false
	Open=%cd %p/patchfs://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view bz2

#regex/\.(diff|patch)(\.(gz|Z))$
[Regex/_._diff_patch___._gz_Z___]
	Regex=\.(diff|patch)(\.(gz|Z))$
	RegexIgnoreCase=false
	Open=%cd %p/patchfs://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view gz

#regex/\.(diff|patch)(\.xz)$
[Regex/_._diff_patch___.xz__]
	Regex=\.(diff|patch)(\.xz)$
	RegexIgnoreCase=false
    Open=%cd %p/patchfs://
    View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view xz

#regex/\.(diff|patch)(\.zst)$
[Regex/_._diff_patch___.zst__]
	Regex=\.(diff|patch)(\.zst)$
	RegexIgnoreCase=false
    Open=%cd %p/patchfs://
    View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zst

# ls-lR
#regex/(^|\.)ls-?lR(\.gz|Z|bz2)$
[Regex/_^__._ls-_lR__.gz_Z_bz2__]
	Regex=(^|\.)ls-?lR(\.gz|Z|bz2)$
	RegexIgnoreCase=false
	Open=%cd %p/lslR://

# trpm
#shell/.trpm
[Shell/.trpm]
	Shell=.trpm
	ShellIgnoreCase=false
	Open=%cd %p/trpm://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view trpm

# RPM packages (SuSE uses *.spm for source packages)
#regex/\.(src\.rpm|spm)$
[Regex/_._src_.rpm_spm__]
	Regex=\.(src\.rpm|spm)$
	RegexIgnoreCase=false
	Open=%cd %p/rpm://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view src.rpm

#shell/.rpm
[Shell/.rpm]
	Shell=.rpm
	ShellIgnoreCase=false
	Open=%cd %p/rpm://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view rpm

# deb
#regex/\.u?deb$
[Regex/_.u_deb_]
	Regex=\.u?deb$
	RegexIgnoreCase=false
	Open=%cd %p/deb://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view deb

# dpkg
#shell/.debd
[Shell/.debd]
	Shell=.debd
	ShellIgnoreCase=false
        Open=%cd %p/debd://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view debd

# apt
#shell/.deba
[Shell/.deba]
	Shell=.deba
	ShellIgnoreCase=false
        Open=%cd %p/deba://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view deba

# ISO9660
#shell/i/.iso
[Shell/.iso]
	Shell=.iso
	ShellIgnoreCase=true
	Open=%cd %p/iso9660://
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view iso9660

#regex/\.(diff|patch)$
[Regex/_._diff_patch__]
	Regex=\.(diff|patch)$
	RegexIgnoreCase=false
	Open=%cd %p/patchfs://
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view cat

# ar library
#regex/\.s?a$
[Regex/_.s_a_]
	Regex=\.s?a$
	RegexIgnoreCase=false
	Open=%cd %p/uar://
	#Open=%view{ascii} ar tv %f
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view ar

# gplib
#shell/i/.lib
[Shell/.lib]
	Shell=.lib
	ShellIgnoreCase=true
	Open=%cd %p/ulib://
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view lib

# ace
#shell/i/.ace
[Shell/.ace]
	Shell=.ace
	ShellIgnoreCase=true
	Open=%cd %p/uace://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view ace
	Extract=unace x %f

# arc
#shell/i/.arc
[Shell/.arc]
	Shell=.arc
	ShellIgnoreCase=true
	Open=%cd %p/uarc://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view arc
	Extract=arc x %f '*'
	Extract (with flags)=I=%{Enter any Arc flags:}; if test -n "$I"; then arc x $I %f; fi

# zip
#shell/i/.zip
[Shell/.zip]
	Shell=.zip
	ShellIgnoreCase=true
	Open=%cd %p/uzip://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zip

# zoo
#shell/i/.zoo
[Shell/.zoo]
	Shell=.zoo
	ShellIgnoreCase=true
	Open=%cd %p/uzoo://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zoo

# lz4
#regex/\.lz4$
[Regex/_.lz4_]
	Regex=\.lz4$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view lz4 %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view lz4

# WIM
#shell/i/\.wim
[Shell/_.wim]
	Shell=\.wim
	ShellIgnoreCase=true
	Open=%cd %p/uwim://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view wim

# gzip
#type/\(gzip compressed
[Type/__gzip compressed]
	Type=\(gzip compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view gz %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view gz

# bzip2
#type/\(bzip2 compressed
[Type/__bzip2 compressed]
	Type=\(bzip2 compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view bzip2 %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view bz2

# bzip
#type/\(bzip compressed
[Type/__bzip compressed]
	Type=\(bzip compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view bzip %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view bzip

# compress
#type/\(compress'd
[Type/__compress'd]
	Type=\(compress'd
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view gz %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view gz

# lz
#type/\(lzip compressed
[Type/__lzip compressed]
	Type=\(lzip compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view lz %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view lz

# lzma
#type/\(LZMA compressed
[Type/__LZMA compressed]
	Type=\(LZMA compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view lzma %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view lzma

# xz
#type/\(XZ compressed
[Type/__XZ compressed]
	Type=\(XZ compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view xz %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view xz

# zstd
#type/\(Zstandard compressed
[Type/__Zstandard compressed]
	Type=\(Zstandard compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh view zst %var{PAGER:more}
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zst

# zip
#type/\(Zip archive
[Type/__Zip archive]
	Type=\(Zip archive
	TypeIgnoreCase=false
	Open=%cd %p/uzip://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zip

# jar(zip)
#type/i/\(Java\ (Jar\ file|archive)\ data\ \((zip|JAR)\)
[Type/__Java_ _Jar_ file_archive__ data_ ___zip_JAR___]
	Type=\(Java\ (Jar\ file|archive)\ data\ \((zip|JAR)\)
	TypeIgnoreCase=true
	Open=%cd %p/uzip://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zip

# lha
#type/^LHa\ .*archive
[Type/^LHa_ .*archive]
	Type=^LHa\ .*archive
	TypeIgnoreCase=false
	Open=%cd %p/ulha://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view lha

# PAK
#type/^PAK\ .*archive
[Type/^PAK_ .*archive]
	Type=^PAK\ .*archive
	TypeIgnoreCase=false
	Open=%cd %p/unar://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view pak

# Parity Archive
#type/^Parity\ Archive\ Volume\ Set
[Type/^Parity_ Archive_ Volume_ Set]
	Type=^Parity\ Archive\ Volume\ Set
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/archive.sh open par2

# Mailboxes
#type/^ASCII\ mail\ text
[Type/^ASCII_ mail_ text]
	Type=^ASCII\ mail\ text
	TypeIgnoreCase=false
	Open=%cd %p/mailfs://


### Sources ###

# C/C++
#regex/i/\.(c|cc|cpp)$
[Regex/_._c_cc_cpp__]
	Regex=\.(c|cc|cpp)$
	RegexIgnoreCase=true
	Include=editor

# C/C++ header
#regex/i/\.(h|hh|hpp)$
[Regex/_._h_hh_hpp__]
	Regex=\.(h|hh|hpp)$
	RegexIgnoreCase=true
	Include=editor

# Fortran
#shell/i/.f
[Shell/.f]
	Shell=.f
	ShellIgnoreCase=true
	Include=editor

# Assembler
#regex/i/\.(s|asm)$
[Regex/_._s_asm__]
	Regex=\.(s|asm)$
	RegexIgnoreCase=true
	Include=editor

# .so libraries
#regex/\.(so|so\.[0-9\.]*)$
[Regex/_._so_so_._0-9_._*__]
	Regex=\.(so|so\.[0-9\.]*)$
	RegexIgnoreCase=false
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view so

# Object
#type/^ELF
[Type/^ELF]
	Type=^ELF
	TypeIgnoreCase=false
	#Open=%var{PAGER:more} %f
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view elf


### Documentation ###

# Texinfo
#regex/\.(te?xi|texinfo)$

# GNU Info page
#type/^Info\ text
[Type/^Info_ text]
	Type=^Info\ text
	TypeIgnoreCase=false
 	Open=/usr/lib/mc/ext.d/text.sh open info

#shell/.info
[Shell/.info]
	Shell=.info
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open info

# Exception: .3gp are video files not manual pages
#shell/i/.3gp
[Shell/.3gp]
	Shell=.3gp
	ShellIgnoreCase=true
	Include=video

# Troff with me macros.
# Exception - "read.me" is not a nroff file.
#shell/read.me
[Shell/read.me]
	Shell=read.me
	ShellIgnoreCase=false
	Open=
	View=

#shell/.me
[Shell/.me]
	Shell=.me
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open nroff.me %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view nroff.me %var{PAGER:more}

# Troff with ms macros.
#shell/.ms
[Shell/.ms]
	Shell=.ms
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open nroff.ms %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view nroff.ms %var{PAGER:more}

# Manual page - compressed
#type/^(ASCII )?troff.*gzip compressed
[Type/^_ASCII __troff.*gzip compressed]
	Type=^(ASCII )?troff.*gzip compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.gz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.gz %var{PAGER:more}

#type/^(ASCII )?troff.*bzip compressed
[Type/^_ASCII __troff.*bzip compressed]
	Type=^(ASCII )?troff.*bzip compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.bz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.bz %var{PAGER:more}

#type/^(ASCII )?troff.*bzip2 compressed
[Type/^_ASCII __troff.*bzip2 compressed]
	Type=^(ASCII )?troff.*bzip2 compressed
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.bz2 %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.bz2 %var{PAGER:more}

# Manual page
#type/^(ASCII )?troff
[Type/^_ASCII __troff]
	Type=^(ASCII )?troff
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man %var{PAGER:more}

# Perl pod page
#shell/.pod
[Shell/.pod]
	Shell=.pod
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open pod %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view pod %var{PAGER:more}

#regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lz$
[Regex/__^0-9__^_^_._*__.__1-9__A-Za-z_*__ln___.lz_]
	Regex=([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lz$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.lz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.lz %var{PAGER:more}

#regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lz4$
[Regex/__^0-9__^_^_._*__.__1-9__A-Za-z_*__ln___.lz4_]
	Regex=([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lz4$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.lz4 %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.lz4 %var{PAGER:more}

#regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
[Regex/__^0-9__^_^_._*__.__1-9__A-Za-z_*__ln___.lzma_]
	Regex=([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.lzma %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.lzma %var{PAGER:more}

#regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
[Regex/__^0-9__^_^_._*__.__1-9__A-Za-z_*__ln___.xz_]
	Regex=([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.xz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.xz %var{PAGER:more}

#regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.zst$
[Regex/__^0-9__^_^_._*__.__1-9__A-Za-z_*__ln___.zst_]
	Regex=([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.zst$
	RegexIgnoreCase=false
	Open=/usr/lib/mc/ext.d/text.sh open man.zst %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.zst %var{PAGER:more}

# CHM
#shell/i/.chm
[Shell/.chm]
	Shell=.chm
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/text.sh open chm


### Images ###

#type/^GIF
[Type/^GIF]
	Type=^GIF
	TypeIgnoreCase=false
	Include=image

#type/^JPEG
[Type/^JPEG]
	Type=^JPEG
	TypeIgnoreCase=false
	View=%view{ascii} /usr/lib/mc/ext.d/image.sh view jpeg
	Include=image

#type/^PC\ bitmap
[Type/^PC_ bitmap]
	Type=^PC\ bitmap
	TypeIgnoreCase=false
	Include=image

#type/^PNG
[Type/^PNG]
	Type=^PNG
	TypeIgnoreCase=false
	Include=image

#type/^JNG
[Type/^JNG]
	Type=^JNG
	TypeIgnoreCase=false
	Include=image

#type/^MNG
[Type/^MNG]
	Type=^MNG
	TypeIgnoreCase=false
	Include=image

#type/^TIFF
[Type/^TIFF]
	Type=^TIFF
	TypeIgnoreCase=false
	Include=image

#type/^PBM
[Type/^PBM]
	Type=^PBM
	TypeIgnoreCase=false
	Include=image

#type/^PGM
[Type/^PGM]
	Type=^PGM
	TypeIgnoreCase=false
	Include=image

#type/^PPM
[Type/^PPM]
	Type=^PPM
	TypeIgnoreCase=false
	Include=image

#type/^Netpbm
[Type/^Netpbm]
	Type=^Netpbm
	TypeIgnoreCase=false
	Include=image

#shell/.xcf
[Shell/.xcf]
	Shell=.xcf
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/image.sh open xcf

#shell/.xbm
[Shell/.xbm]
	Shell=.xbm
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/image.sh open xbm

#shell/.xpm
[Shell/.xpm]
	Shell=.xpm
	ShellIgnoreCase=false
	Include=image
	View=/usr/lib/mc/ext.d/image.sh view xpm %f

#shell/.ico
[Shell/.ico]
	Shell=.ico
	ShellIgnoreCase=false
	Include=image

#shell/i/.svg
[Shell/.svg]
	Shell=.svg
	ShellIgnoreCase=true
	View=%view{ascii} /usr/lib/mc/ext.d/image.sh view svg
	Open=/usr/lib/mc/ext.d/image.sh open svg


### Sound files ###

#regex/i/\.(wav|snd|voc|au|smp|aiff|snd|m4a|ape|aac|wv)$
[Regex/_._wav_snd_voc_au_smp_aiff_snd_m4a_ape_aac_wv__]
	Regex=\.(wav|snd|voc|au|smp|aiff|snd|m4a|ape|aac|wv)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open common
	View=%view{ascii} /usr/lib/mc/ext.d/sound.sh view common

#regex/i/\.(mod|s3m|xm|it|mtm|669|stm|ult|far)$
[Regex/_._mod_s3m_xm_it_mtm_669_stm_ult_far__]
	Regex=\.(mod|s3m|xm|it|mtm|669|stm|ult|far)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open mod

#shell/i/.waw22
[Shell/.waw22]
	Shell=.waw22
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open wav22

#shell/i/.mp3
[Shell/.mp3]
	Shell=.mp3
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open mp3
	View=%view{ascii} /usr/lib/mc/ext.d/sound.sh view mp3

#regex/i/\.og[gax]$
[Regex/_.og_gax__]
	Regex=\.og[gax]$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open ogg
	View=%view{ascii} /usr/lib/mc/ext.d/sound.sh view ogg

#shell/i/.opus
[Shell/.opus]
	Shell=.opus
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open opus
	View=%view{ascii} /usr/lib/mc/ext.d/sound.sh view opus

#regex/i/\.(spx|flac)$
[Regex/_._spx_flac__]
	Regex=\.(spx|flac)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open common

#regex/i/\.(midi?|rmid?)$
[Regex/_._midi__rmid___]
	Regex=\.(midi?|rmid?)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open midi

#shell/i/.wma
[Shell/.wma]
	Shell=.wma
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open wma
	View=%view{ascii} /usr/lib/mc/ext.d/sound.sh view wma


### Play lists ###

#regex/i/\.(m3u|pls)$
[Regex/_._m3u_pls__]
	Regex=\.(m3u|pls)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/sound.sh open playlist


### Video ###

#shell/i/.avi
[Shell/.avi]
	Shell=.avi
	ShellIgnoreCase=true
	Include=video

#regex/i/\.as[fx]$
[Regex/_.as_fx__]
	Regex=\.as[fx]$
	RegexIgnoreCase=true
	Include=video

#shell/i/.divx
[Shell/.divx]
	Shell=.divx
	ShellIgnoreCase=true
	Include=video

#shell/i/.mkv
[Shell/.mkv]
	Shell=.mkv
	ShellIgnoreCase=true
	Include=video

#regex/i/\.(mov|qt)$
[Regex/_._mov_qt__]
	Regex=\.(mov|qt)$
	RegexIgnoreCase=true
	Include=video

#regex/i/\.(mp4|m4v|mpe?g)$
[Regex/_._mp4_m4v_mpe_g__]
	Regex=\.(mp4|m4v|mpe?g)$
	RegexIgnoreCase=true
	Include=video

# MPEG-2 TS container + H.264 codec
#shell/i/.mts
[Shell/.mts]
	Shell=.mts
	ShellIgnoreCase=true
	Include=video

#shell/i/.ts
[Shell/.ts]
	Shell=.ts
	ShellIgnoreCase=true
	Include=video

#shell/i/.vob
[Shell/.vob]
	Shell=.vob
	ShellIgnoreCase=true
	Include=video

#shell/i/.wmv
[Shell/.wmv]
	Shell=.wmv
	ShellIgnoreCase=true
	Include=video

#regex/i/\.fl[icv]$
[Regex/_.fl_icv__]
	Regex=\.fl[icv]$
	RegexIgnoreCase=true
	Include=video

#shell/i/.ogv
[Shell/.ogv]
	Shell=.ogv
	ShellIgnoreCase=true
	Include=video

#regex/i/\.ra?m$
[Regex/_.ra_m_]
	Regex=\.ra?m$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/video.sh open ram

# WebM
#shell/i/.webm
[Shell/.webm]
	Shell=.webm
	ShellIgnoreCase=true
    Include=video

#type/WebM
[Type/WebM]
	Type=WebM
	TypeIgnoreCase=false
    Include=video


### Documents ###

# Postscript
#type/^PostScript
[Type/^PostScript]
	Type=^PostScript
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open ps
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view ps

# PDF
#type/^PDF
[Type/^PDF]
	Type=^PDF
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open pdf
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view pdf

# html
#regex/i/\.html?$
[Regex/_.html__]
	Regex=\.html?$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/web.sh open html
	View=%view{ascii} /usr/lib/mc/ext.d/web.sh view html

# StarOffice 5.2
#shell/.sdw
[Shell/.sdw]
	Shell=.sdw
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open ooffice

# StarOffice 6 and OpenOffice.org formats
#regex/i/\.(odt|fodt|ott|sxw|stw|ods|fods|ots|sxc|stc|odp|fodp|otp|sxi|sti|odg|fodg|otg|sxd|std|odb|odf|sxm|odm|sxg)$
[Regex/_._odt_fodt_ott_sxw_stw_ods_fods_ots_sxc_stc_odp_fodp_otp_sxi_sti_odg_fodg_otg_sxd_std_odb_odf_sxm_odm_sxg__]
	Regex=\.(odt|fodt|ott|sxw|stw|ods|fods|ots|sxc|stc|odp|fodp|otp|sxi|sti|odg|fodg|otg|sxd|std|odb|odf|sxm|odm|sxg)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open ooffice
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view odt

# AbiWord
#shell/.abw
[Shell/.abw]
	Shell=.abw
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open abw

# Gnumeric
#shell/i/.gnumeric
[Shell/.gnumeric]
	Shell=.gnumeric
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open gnumeric

# Microsoft Word Document
#regex/i/\.(do[ct]|wri|docx)$
[Regex/_._do_ct__wri_docx__]
	Regex=\.(do[ct]|wri|docx)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open msdoc
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msdoc
#type/^Microsoft\ Word
[Type/^Microsoft_ Word]
	Type=^Microsoft\ Word
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open msdoc
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msdoc

# RTF document
#shell/i/.rtf
[Shell/.rtf]
	Shell=.rtf
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open msdoc

# Microsoft Excel Worksheet
#regex/i/\.(xl[sw]|xlsx)$
[Regex/_._xl_sw__xlsx__]
	Regex=\.(xl[sw]|xlsx)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open msxls
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msxls
#type/^Microsoft\ Excel
[Type/^Microsoft_ Excel]
	Type=^Microsoft\ Excel
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open msxls
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msxls

# Microsoft PowerPoint Presentation
#regex/i/\.(pp[ts]|pptx)$
[Regex/_._pp_ts__pptx__]
	Regex=\.(pp[ts]|pptx)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open msppt
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msppt

# Use OpenOffice.org/LibreOffice to open any MS Office documents
#type/^Microsoft\ Office\ Document
[Type/^Microsoft_ Office_ Document]
	Type=^Microsoft\ Office\ Document
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open ooffice
#type/^Microsoft\ OOXML
[Type/^Microsoft_ OOXML]
	Type=^Microsoft\ OOXML
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open ooffice

# Framemaker
#type/^FrameMaker
[Type/^FrameMaker]
	Type=^FrameMaker
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/doc.sh open framemaker

# DVI
#shell/i/.dvi
[Shell/.dvi]
	Shell=.dvi
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open dvi
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view dvi

# TeX
#shell/i/.tex
[Shell/.tex]
	Shell=.tex
	ShellIgnoreCase=true
	Include=editor

# Markdown
#shell/i/.md
[Shell/.md]
	Shell=.md
	ShellIgnoreCase=true
	Include=editor

# DjVu
#regex/i/\.djvu?$
[Regex/_.djvu__]
	Regex=\.djvu?$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open djvu
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view djvu

# Comic Books
#regex/i/\.cb[zr]$
[Regex/_.cb_zr__]
	Regex=\.cb[zr]$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open comic

# Epup, mobi, fb2
#regex/i/\.(epub|mobi|fb2)$
[Regex/_._epub_mobi_fb2__]
	Regex=\.(epub|mobi|fb2)$
	RegexIgnoreCase=true
	Open=/usr/lib/mc/ext.d/doc.sh open ebook
	View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view ebook


### Miscellaneous ###

# Compiled Java classes
#shell/.class
[Shell/.class]
	Shell=.class
	ShellIgnoreCase=false
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view javaclass

# Imakefile
#shell/Imakefile
[Shell/Imakefile]
	Shell=Imakefile
	ShellIgnoreCase=false
	Open=xmkmf -a

# Makefile.PL (MakeMaker)
#regex/^Makefile\.(PL|pl)$
[Regex/^Makefile_._PL_pl__]
	Regex=^Makefile\.(PL|pl)$
	RegexIgnoreCase=false
	Open=%var{PERL:perl} %f

# Makefile
#regex/[Mm]akefile
[Regex/_Mm_akefile]
	Regex=[Mm]akefile
	RegexIgnoreCase=false
	Open=make -f %f %{Enter parameters}

# sqlite3.db
#type/^SQLite 3.x database
[Type/^SQLite 3.x database]
	Type=^SQLite 3.x database
	TypeIgnoreCase=false
	Open=/usr/lib/mc/ext.d/misc.sh open sqlite
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view sqlite

# dbf
#shell/i/.dbf
[Shell/.dbf]
	Shell=.dbf
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/misc.sh open dbf
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view dbf

# REXX script
#regex/\.(rexx?|cmd)$
[Regex/_._rexx__cmd__]
	Regex=\.(rexx?|cmd)$
	RegexIgnoreCase=false
       Open=rexx %f %{Enter parameters};echo "Press ENTER";read y

# Disk images for Commodore computers (VIC20, C64, C128)
#shell/i/.d64
[Shell/.d64]
	Shell=.d64
	ShellIgnoreCase=true
	Open=%cd %p/uc1541://
	View=%view{ascii} c1541 %f -list
	Extract=c1541 %f -extract

# Glade, a user interface designer for GTK+ and GNOME
#shell/i/.glade
[Shell/.glade]
	Shell=.glade
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/misc.sh open glade

# Gettext Catalogs
#regex/\.g?mo$
[Regex/_.g_mo_]
	Regex=\.g?mo$
	RegexIgnoreCase=false
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view mo

# po
#shell/.po
[Shell/.po]
	Shell=.po
	ShellIgnoreCase=false
	Open=/usr/lib/mc/ext.d/misc.sh open po

# lyx
#shell/i/.lyx
[Shell/.lyx]
	Shell=.lyx
	ShellIgnoreCase=true
	Open=/usr/lib/mc/ext.d/misc.sh open lyx
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view lyx

# torrent
#shell/i/.torrent
[Shell/.torrent]
	Shell=.torrent
	ShellIgnoreCase=true
	View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view torrent


### Plain compressed files ###


### Includes
# includes should be at end of bindings

#include/editor
[Include/editor]
	Open=%var{EDITOR:editor} %f

#include/image
[Include/image]
	# Open=/usr/lib/mc/ext.d/image.sh open ALL_FORMATS
	# View=%view{ascii} /usr/lib/mc/ext.d/image.sh view ALL_FORMATS
	Open=(xdg-open %s)
	View=(xdg-open %s)

#include/video
[Include/video]
	# Open=/usr/lib/mc/ext.d/video.sh open ALL_FORMATS
	# View=%view{ascii} /usr/lib/mc/ext.d/video.sh view ALL_FORMATS
	Open=(xdg-open %s)
	View=(xdg-open %s)


### Default ###

# Default target for anything not described above
[Default]
	Open=(xdg-open %s)
	View=(xdg-open %s)


### EOF ###
